    #Strength Gem Custom Model Data's

        #Tier 1: Amethyst Shard

        #95 = Broken Strength gem
        #89 = Ruined Strength gem
        #69 = Damaged Strength gem
        #49 = Cracked Strength gem
        #29 = Scratched Strength gem
        #9 = Prisitine Streangth gem

        #Tier 2: amethyst shard

        #96 = Broken Strength gem
        #90 = Ruined Strength gem
        #70 = Damaged Strength gem
        #50 = Cracked Strength gem
        #30 = Scratched Strength gem
        #10 = Pristine Strength gem






    #Fire Gem Custom Model Data's

        #Tier 1: Amethyst Shard

        #95 = Broken fire gem
        #81 = Ruined fire gem
        #61 = Damaged fire gem
        #41 = Cracked fire gem
        #21 = Scratched fire gem
        #1 = Pristine fire gem

        #Tier 2: amethyst shard

        #96 = Broken fire gem
        #82 = Ruined fire gem
        #62 = Damaged fire gem
        #42 = Cracked fire gem
        #22 = Scratched fire gem
        #2 = Pristine fire gem





    #Puff Gem Custom Model Data's

        #Tier 1: Amethyst Shard

        #95 = Broken puff gem
        #85 = Ruined puff gem
        #65 = Damaged puff gem
        #45 = Cracked puff gem
        #25 = Scratched puff gem
        #5 = Pristine puff gem

        #Tier 2: amethyst shard

        #96 = Broken puff gem
        #86 = Ruined puff gem
        #66 = Damaged puff gem
        #46 = Cracked puff gem
        #26 = Scratched puff gem
        #6 = Pristine puff gem





    #Astra Gem Custom Model Data's

        #Tier 1: Amethyst Shard

        #95 = Broken Astra gem
        #93 = Ruined Astra gem
        #73 = Damaged Astra gem
        #53 = Cracked Astra gem
        #33 = Scratched Astra gem
        #13 = Pristine Astra gem

        #Tier 2: amethyst shard

        #96 = Broken Astra gem
        #94 = Ruined puff gem
        #74 = Damaged Astra gem
        #54 = Cracked Astra gem
        #34 = Scratched Astra gem
        #14 = Pristine Astra gem






    #Life Gem Custom Model Data's

        #Tier 1: Amethyst Shard

        #95 = Broken Life gem
        #83 = Ruined Life gem
        #63 = Damaged Life gem
        #43 = Cracked Life gem
        #23 = Scratched Life gem
        #3 = Pristine Life gem

        #Tier 2: amethyst shard

        #96 = Broken Life gem
        #84 = Ruined Life gem
        #64 = Damaged Life gem
        #44 = Cracked Life gem
        #24 = Scratched Life gem
        #4 = Pristine Life gem




    #Speed Gem Custom Model Data's

        #Tier 1: Amethyst Shard

        #95 = Broken Speed gem
        #87 = Ruined Speed gem
        #67 = Damaged Speed gem
        #47 = Cracked Speed gem
        #27 = Scratched Speed gem
        #7 = Pristine Speed gem

        #Tier 2: amethyst shard

        #96 = Broken Speed gem
        #88 = Ruined Speed gem
        #68 = Damaged Speed gem
        #48 = Cracked Speed gem
        #28 = Scratched Speed gem
        #8 = Pristine Speed gem




    #Wealth Gem Custom Model Data's

        #Tier 1: Amethyst Shard

        #95 = Broken Wealth gem
        #91 = Ruined Wealth gem
        #71 = Damaged Wealth gem
        #51 = Cracked Wealth gem
        #31 = Scratched Wealth gem
        #11 = Pristine Wealth gem

        #Tier 2: amethyst shard

        #96 = Broken Wealth gem
        #92 = Ruined Wealth gem
        #72 = Damaged Wealth gem
        #52 = Cracked Wealth gem
        #32 = Scratched Wealth gem
        #12 = Pristine Wealth gem


#on inventory click:
#	if event-inventory's name is "CHEST":
#		if event-item's lore contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
#			cancel event

function capitalizeFirst(text: texts) :: texts:
	loop {_text::*}:
		set {_first-char} to first character of loop-value
		set {_remaining} to last (length of loop-value - 1) characters of loop-value
		set {_output::%loop-index%} to "%{_first-char} in upper case%%{_remaining}%"
		return {_output::*}

every 1 tick:
	loop all players:
		set {_uuid} to uuid of loop-player
		set {_p} to loop-player
		if {_p}'s held item is prismarine shard named "<##F10303>sᴛʀᴇɴɢᴛʜ &r<##FFD773>ɢᴇᴍ":
			if {Strength.Power2.Enchanting.Cooldown.%{_uuid}%} is false:
				send "<##F10303>🔮 <##A4FEF1>Auto Enchanting" to {_p}
				set {Strength.Power2.Enchanting.Minute.%{_uuid}%} to 14
				set {Strength.Power2.Enchanting.Second.%{_uuid}%} to 59
				set {Strength.Power2.Enchanting.Cooldown.%{_uuid}%} to true
		
		if {_p}'s held item is amethyst shard named "<##F10303>&lsᴛʀᴇɴɢᴛʜ &r<##C7C7C7>ɢᴇᴍ":
			if {Strength.Power2.Enchanting.Cooldown.%{_uuid}%} is false:
				send "<##F10303>🔺 <##A4FEF1>Auto Enchanting" to {_p}
				set {Strength.Power2.Enchanting.Minute.%{_uuid}%} to 14
				set {Strength.Power2.Enchanting.Second.%{_uuid}%} to 59
				set {Strength.Power2.Enchanting.Cooldown.%{_uuid}%} to true




		if {_p}'s held item is prismarine shard named "<##EFEFEF>&lᴘᴜғғ &r<##FFD773>ɢᴇᴍ":
			if {Puff.Power2.Enchanting.Cooldown.%{_uuid}%} is false:
				send "<##EFEFEF>🔮 <##A4FEF1>Auto Enchanting" to {_p}
				set {Puff.Power2.Enchanting.Minute.%{_uuid}%} to 14
				set {Puff.Power2.Enchanting.Second.%{_uuid}%} to 59
				set {Puff.Power2.Enchanting.Cooldown.%{_uuid}%} to true
		
		if {_p}'s held item is amethyst shard named "<##EFEFEF>&lᴘᴜғғ &r<##C7C7C7>ɢᴇᴍ":
			if {Puff.Power2.Enchanting.Cooldown.%{_uuid}%} is false:
				send "<##EFEFEF>🔺 <##A4FEF1>Auto Enchanting" to {_p}
				set {Puff.Power2.Enchanting.Minute.%{_uuid}%} to 14
				set {Puff.Power2.Enchanting.Second.%{_uuid}%} to 59
				set {Puff.Power2.Enchanting.Cooldown.%{_uuid}%} to true



	if {Strength.Power2.Enchanting.Cooldown.%{_uuid}%} is false:
		set {Strength.Power2.Enchanting.Display.%{_uuid}%} to "&aReady!"
		if {_p}'s held item is prismarine shard named "<##F10303>sᴛʀᴇɴɢᴛʜ &r<##FFD773>ɢᴇᴍ":
			if {Strength.Power2.Enchanting.Cooldown.%{_uuid}%} is false:
				send "<##F10303>🔮 <##A4FEF1>Auto Enchanting" to {_p}
				set {Strength.Power2.Enchanting.Minute.%{_uuid}%} to 14
				set {Strength.Power2.Enchanting.Second.%{_uuid}%} to 59
				set {Strength.Power2.Enchanting.Cooldown.%{_uuid}%} to true
		
		if {_p}'s held item is amethyst shard named "<##F10303>&lsᴛʀᴇɴɢᴛʜ &r<##C7C7C7>ɢᴇᴍ":
			if {Strength.Power2.Enchanting.Cooldown.%{_uuid}%} is false:
				send "<##F10303>🔺 <##A4FEF1>Auto Enchanting" to {_p}
				set {Strength.Power2.Enchanting.Minute.%{_uuid}%} to 14
				set {Strength.Power2.Enchanting.Second.%{_uuid}%} to 59
				set {Strength.Power2.Enchanting.Cooldown.%{_uuid}%} to true

every 1 tick:
	loop all players:
		if {Disabled.%uuid of loop-player%} > 1:

		else:
						
				
			if loop-player's held item is prismarine shard named "<##ffcc26>&lGold Gem":
				if custom model data of loop-player's held item is 102:
					send action bar "%{Gold.Power1.Snap.Display.%uuid of loop-player%}%  %{Gold.Power2.Railer.Display.%uuid of loop-player%}%" to loop-player

				
			else:

				if loop-player's held item is a prismarine shard named "<##F10303>sᴛʀᴇɴɢᴛʜ &r<##FFD773>ɢᴇᴍ":
					
					send action bar "&f🤺 %{Strength.Power1.Frailer.Display.%uuid of loop-player%}%  <##F10303>🔮 %{Strength.Power2.Enchanting.Display.%uuid of loop-player%}%  &f⚔ %{Strength.Power3.Chad.Display.%uuid of loop-player%}%" to loop-player
						
				else:

					if loop-player's held item is a amethyst shard named "<##F10303>&lsᴛʀᴇɴɢᴛʜ &r<##C7C7C7>ɢᴇᴍ":
							
						send action bar "<##F10303>🔺 %{Strength.Power2.Enchanting.Display.%uuid of loop-player%}%" to loop-player
					
					else:
					












						if loop-player's held item is a prismarine shard named "<##FEFD17>&lsᴘᴇᴇᴅ &r<##FFD773>ɢᴇᴍ":
							send action bar "%{Speed.Power1.SlothSedative.Display.%uuid of loop-player%}%  <##FEFD17>🔮%{Speed.Power2.Enchanting.Display.%uuid of loop-player%}%  &f%{Speed.Power3.SpeedStorm.Display.%uuid of loop-player%}%" to loop-player
				
						else:
								

							if loop-player's held item is a amethyst shard named "<##FEFD17>&lsᴘᴇᴇᴅ &r<##C7C7C7>ɢᴇᴍ":
								send action bar "<##FEFD17>🔺%{Speed.Power2.Enchanting.Display.%uuid of loop-player%}%" to loop-player
					
					
							else:
						













								if loop-player's held item is a prismarine shard named "<##FE8120>&lғɪʀᴇ &r<##FFD773>ɢᴇᴍ":
									send action bar "%{Fire.Power1.Fireball.Display.%uuid of loop-player%}%  <##FE8120>🔮 %{Fire.Power2.Enchanting.Display.%uuid of loop-player%}%  %{Fire.Power3.Campfire.Display.%uuid of loop-player%}%" to loop-player
						
						
								else:

									if loop-player's held item is a amethyst shard named "<##FE8120>&lғɪʀᴇ &r<##C7C7C7>ɢᴇᴍ":
										send action bar "<##FE8120>🔺 %{Fire.Power2.Enchanting.Display.%uuid of loop-player%}%" to loop-player
							
										
									else:











										if loop-player's held item is a prismarine shard named "<##FE04B4>&lʟɪғᴇ &r<##FFD773>ɢᴇᴍ":
											send action bar "&f%{Life.Power1.HeartDrainer.Display.%uuid of loop-player%}%  <##FE04B4>🔮%{Life.Power2.Healer.Display.%uuid of loop-player%}%  &f%{Life.Power3.CircleOfLfe.Display.%uuid of loop-player%}%" to loop-player
								
								
								
										else:
											if loop-player's held item is a amethyst shard named "<##FE04B4>&lʟɪғᴇ &r<##C7C7C7>ɢᴇᴍ":
												send action bar "<##FE04B4>🔺%{Life.Power2.Healer.Display.%uuid of loop-player%}%" to loop-player
									
											













											else:

												if loop-player's held item is prismarine shard named "<##EFEFEF>&lᴘᴜғғ &r<##FFD773>ɢᴇᴍ":
													send action bar "%{Puff.Power3.Breezy.Display.%uuid of loop-player%}%  <##efefef>🔮%{Puff.Power2.Enchanting.Display.%uuid of loop-player%}%  &f%{Puff.Power1.Dash.Display.%uuid of loop-player%}%" to loop-player
										
										
										
												else:

													if loop-player's held item is a amethyst shard named "<##EFEFEF>&lᴘᴜғғ &r<##C7C7C7>ɢᴇᴍ":
														send action bar "<##efefef>🔺%{Puff.Power2.Enchanting.Display.%uuid of loop-player%}%" to loop-player
											
													else:











														if loop-player's held item is prismarine shard named "<##0EC912>&lᴡᴇᴀʟᴛʜ &r<##FFD773>ɢᴇᴍ":
													
															send action bar "%{Wealth.Power1.Unfortunate.Display.%uuid of loop-player%}%  <##0EC912>🔮%{Wealth.Power2.Enchanting.Display.%uuid of loop-player%}%  %{Wealth.Power3.RichRush.Display.%uuid of loop-player%}%" to loop-player
												
							
															
												
															
														else:
															if loop-player's held item is a amethyst shard named "<##0EC912>&lᴡᴇᴀʟᴛʜ &r<##C7C7C7>ɢᴇᴍ":

																send action bar "<##0EC912>🔺%{Wealth.Power2.Enchanting.Display.%uuid of loop-player%}%" to loop-player
								











															else:

																if loop-player's held item is a prismarine shard named "<##A01FFF>&lᴀsᴛʀᴀ &r<##C7C7C7>ɢᴇᴍ":
																
																	if {Astra.Power3.Projection.Activated.%uuid of loop-player%} is not true:















																		send action bar "%{Astra.Power1.Daggers.Display.%uuid of loop-player%}%  <##A01FFF>🔮 %{entity3.%loop-player%::*}%  &f%{Astra.Power3.Projection.Display.%uuid of loop-player%}%" to loop-player
														
														
																else:

																	if loop-player's held item is a amethyst shard named "<##A01FFF>&lᴀsᴛʀᴀ &r<##C7C7C7>ɢᴇᴍ":
																		
																		send action bar "<##A01FFF>🔺%{Astra.Power2.Enchanting.Display.%uuid of loop-player%}%" to loop-player		
																		
																	else:
































																		if loop-player's off hand item is prismarine shard named "<##ffcc26>&lGold Gem":
																			if custom model data of loop-player's off hand item is 102:
																				send action bar "%{Gold.Power1.Snap.Display.%uuid of loop-player%}%  %{Gold.Power2.Railer.Display.%uuid of loop-player%}%" to loop-player
															
																			
																		else:


																			if loop-player's off hand item is a prismarine shard named "<##F10303>sᴛʀᴇɴɢᴛʜ &r<##FFD773>ɢᴇᴍ":
					
																				send action bar "&f🤺 %{Strength.Power1.Frailer.Display.%uuid of loop-player%}%  <##F10303>🔮 %{Strength.Power2.Enchanting.Display.%uuid of loop-player%}%  &f⚔ %{Strength.Power3.Chad.Display.%uuid of loop-player%}%" to loop-player
																					
																			else:
																	
																				if loop-player's off hand item is a amethyst shard named "<##F10303>&lsᴛʀᴇɴɢᴛʜ &r<##C7C7C7>ɢᴇᴍ":
																						
																					send action bar "<##F10303>🔺 %{Strength.Power2.Enchanting.Display.%uuid of loop-player%}%" to loop-player
																				
																				else:
																				
																	
																	
																	
																	
																	
																	
																	
																	
																	
																	
																	
																	
																					if loop-player's off hand item is a prismarine shard named "<##FEFD17>&lsᴘᴇᴇᴅ &r<##FFD773>ɢᴇᴍ":
																						send action bar "%{Speed.Power1.SlothSedative.Display.%uuid of loop-player%}%  <##FEFD17>🔮%{Speed.Power2.Enchanting.Display.%uuid of loop-player%}%  &f%{Speed.Power3.SpeedStorm.Display.%uuid of loop-player%}%" to loop-player
																			
																					else:
																							
																	
																						if loop-player's off hand item is a amethyst shard named "<##FEFD17>&lsᴘᴇᴇᴅ &r<##C7C7C7>ɢᴇᴍ":
																							send action bar "<##FEFD17>🔺%{Speed.Power2.Enchanting.Display.%uuid of loop-player%}%" to loop-player
																				
																				
																						else:
																					
																	
																	
																	
																	
																	
																	
																	
																	
																	
																	
																	
																	
																	
																							if loop-player's off hand item is a prismarine shard named "<##FE8120>&lғɪʀᴇ &r<##FFD773>ɢᴇᴍ":
																								send action bar "%{Fire.Power1.Fireball.Display.%uuid of loop-player%}%  <##FE8120>🔮 %{Fire.Power2.Enchanting.Display.%uuid of loop-player%}%  %{Fire.Power3.Campfire.Display.%uuid of loop-player%}%" to loop-player
																					
																					
																							else:
																	
																								if loop-player's off hand item is a amethyst shard named "<##FE8120>&lғɪʀᴇ &r<##C7C7C7>ɢᴇᴍ":
																									send action bar "<##FE8120>🔺 %{Fire.Power2.Enchanting.Display.%uuid of loop-player%}%" to loop-player
																						
																									
																								else:
																	
																	
																	
																	
																	
																	
																	
																	
																	
																	
																	
																									if loop-player's off hand item is a prismarine shard named "<##FE04B4>&lʟɪғᴇ &r<##FFD773>ɢᴇᴍ":
																										send action bar "&f%{Life.Power1.HeartDrainer.Display.%uuid of loop-player%}%  <##FE04B4>🔮%{Life.Power2.Healer.Display.%uuid of loop-player%}%  &f%{Life.Power3.CircleOfLfe.Display.%uuid of loop-player%}%" to loop-player
																							
																							
																							
																									else:
																										if loop-player's off hand item is a amethyst shard named "<##FE04B4>&lʟɪғᴇ &r<##C7C7C7>ɢᴇᴍ":
																											send action bar "<##FE04B4>🔺%{Life.Power2.Healer.Display.%uuid of loop-player%}%" to loop-player
																								
																										
																	
																	
																	
																	
																	
																	
																	
																	
																	
																	
																	
																	
																	
																										else:
																	
																											if loop-player's off hand item is prismarine shard named "<##EFEFEF>&lᴘᴜғғ &r<##FFD773>ɢᴇᴍ":
																												send action bar "%{Puff.Power3.Breezy.Display.%uuid of loop-player%}%  <##efefef>🔮%{Puff.Power2.Enchanting.Display.%uuid of loop-player%}%  &f%{Puff.Power1.Dash.Display.%uuid of loop-player%}%" to loop-player
																									
																									
																									
																											else:
																	
																												if loop-player's off hand item is a amethyst shard named "<##EFEFEF>&lᴘᴜғғ &r<##C7C7C7>ɢᴇᴍ":
																													send action bar "<##efefef>🔺%{Puff.Power2.Enchanting.Display.%uuid of loop-player%}%" to loop-player
																										
																												else:
																	
																	
																	
																	
																	
																	
																	
																	
																	
																	
																	
																													if loop-player's off hand item is prismarine shard named "<##0EC912>&lᴡᴇᴀʟᴛʜ &r<##FFD773>ɢᴇᴍ":
																												
																														send action bar "%{Wealth.Power1.Unfortunate.Display.%uuid of loop-player%}%  <##0EC912>🔮%{Wealth.Power2.Enchanting.Display.%uuid of loop-player%}%  %{Wealth.Power3.RichRush.Display.%uuid of loop-player%}%" to loop-player
																											
																						
																														
																											
																														
																													else:
																														if loop-player's off hand item is a amethyst shard named "<##0EC912>&lᴡᴇᴀʟᴛʜ &r<##C7C7C7>ɢᴇᴍ":
																	
																															send action bar "<##0EC912>🔺%{Wealth.Power2.Enchanting.Display.%uuid of loop-player%}%" to loop-player
																							
																	
																	
																	
																	
																	
																	
																	
																	
																	
																	
																	
																														else:
																
																															if loop-player's off hand item is a prismarine shard named "<##A01FFF>&lᴀsᴛʀᴀ &r<##C7C7C7>ɢᴇᴍ":
																																if {Astra.Power3.Projection.Activated.%uuid of loop-player%} is not true:
			
																
																
																
																
																
																
																
																
																
																
																
																
																
																
																																	send action bar "%{Astra.Power1.Daggers.Display.%uuid of loop-player%}%  <##A01FFF>🔮 %{entity3.%loop-player%::*}%  &f%{Astra.Power3.Projection.Display.%uuid of loop-player%}%" to loop-player
																																																						
																													
																															else:
																
																																if loop-player's off hand item is a amethyst shard named "<##A01FFF>&lᴀsᴛʀᴀ &r<##C7C7C7>ɢᴇᴍ":
																																	send action bar "<##A01FFF>🔺%{Astra.Power2.Enchanting.Display.%uuid of loop-player%}%" to loop-player	



on join:
	set {_uuid} to uuid of player
	if {Disabled.%{_uuid}%} is not set:
		set {Disabled.%{_uuid}%} to 0



on inventory click:
	if name of event-inventory is "CHEST":
		if lore of item contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
			cancel event
			
	if name of event-inventory is "LARGE CHEST":
		if lore of item contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
			cancel event

	if name of event-inventory is "BARREL":
		if lore of item contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
			cancel event
			
	if name of event-inventory is "FURNACE":
		if lore of item contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
			cancel event
			
	if name of event-inventory is "BLAST FURNACE":
		if lore of item contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
			cancel event
			
	if name of event-inventory is "SMOKER":
		if lore of item contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
			cancel event
			
	if name of event-inventory is "ENDER CHEST":
		if lore of item contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
			cancel event
			
	if name of event-inventory is "BOAT WITH CHEST":
		if lore of item contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
			cancel event
			
	if name of event-inventory is "SHULKER BOX":
		if lore of item contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
			cancel event
			

	if name of event-inventory is "Dropper":
		if lore of item contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
			cancel event
			
	if name of event-inventory is "Minecart with Hopper":
		if lore of item contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
			cancel event
			
	if name of event-inventory is "Minecart with Chest":
		if lore of item contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
			cancel event
			
	if name of event-inventory is "Item Hopper":
		if lore of item contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
			cancel event
			
	if name of event-inventory is "Dispenser":
		if lore of item contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
			cancel event

	if name of event-inventory is "Repair & Name":
		if lore of item contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
			cancel event

			



on inventory click:
	if event-inventory is crafting table inventory:
		if index of event-slot is 1 or 2 or 3 or 4 or 5 or 6 or 7 or 8 or 9:
			if lore of event-item contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
				cancel event
			if lore of event-item contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
				cancel event


on inventory click:
	if click type is number key:
		if lore of slot hotbar button of player's inventory contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
			cancel event

on inventory click:
	if click type is swap offhand:
		if lore of player's off hand item contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
			cancel event

on inventory click:
	if click type is shift+lmb:
		if lore of slot hotbar button of player's inventory contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
			cancel event


#item frame fix
on right click on itemframe:
	if lore of player's held item contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
		cancel event

on right click on entity:
	if entity is an item frame:
		if lore of player's held item contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
			cancel event

on itemframe place:
	if lore of event-item contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
		cancel event

	if event-item is player head named "<##E9C2FF><bold>ᴛʀᴀᴅᴇʀ":
		cancel event

	if event-item is player head named "<##ACFF82><bold>ᴜᴘɢʀᴀᴅᴇʀ":
		cancel event





on join:
	set {_uuid} to uuid of player
	if {Bliss.GemHealth.%{_uuid}%} is not set:
		set {Bliss.GemHealth.%{_uuid}%} to 6
	if {Bliss.Tier.%{_uuid}%} is not set:
		set {Bliss.Tier.%{_uuid}%} to 1
	if {reviveselected.%uuid of player%} is not set:
		set {reviveselected.%uuid of player%} to true







#Plugin designed By SoulPheoniXYT please do not edit the code or it might break the plugin
#Fixed by HyperDondon and others in the discord server https://discord.gg/7GyUbdsDbG

#Death MSG's





on drop amethyst shard:
	if lore of event-item contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
		cancel event

on drop prismarine shard:
	if lore of event-item contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
		cancel event


command /shard:
	permission: op
	trigger:
		give player nautilus shell with custom model data 240 named "&fShards" 








#on tab complete for "/bliss gem":
#	add "StrengthTier1.Pristine" to tab completions
#	add "StrengthTier1.Scratched" to tab completions
#	add "StrengthTier1.Cracked" to tab completions
#	add "StrengthTier1.Damaged" to tab completions
#	add "StrengthTier1.Ruined" to tab completions
#	add "StrengthTier1.Broken" to tab completions
	
	
#	add "StrengthTier2.Pristine+5" to tab completions
#	add "StrengthTier2.Pristine" to tab completions
#	add "StrengthTier2.Scratched" to tab completions
#	add "StrengthTier2.Cracked" to tab completions
#	add "StrengthTier2.Damaged" to tab completions
#	add "StrengthTier2.Ruined" to tab completions
#	add "StrengthTier2.Broken" to tab completions











#command /teamspeak:
#	trigger:
#		give player a netherite chestplate
#		give player a netherite helmet
#		give player a netherite leggings
#		give player a netherite boots
#		give player a netherite sword
#		give player a netherite axe
#		give player a netherite pickaxe







on death of warden:
	if victim's name is "&cNetherite Warden":
		drop netherite leggings
		drop netherite chestplate
		drop netherite sword
		drop netherite boots
		drop netherite helmet
		broadcast "&cWarden was slain"

		

command /warden:
	permission: op
	trigger:
		spawn warden at player
		set last spawned warden's name to "&cNetherite Warden"
		broadcast "&cWarden has spawned at %player's x coordinate%z %player's y coordinate%y %player's z coordinate%z"
		set last spawned entity's max health to 1000
		apply regeneration 20 to last spawned entity for 10 seconds
		








command /cooldown <player>:
	permission: op
	trigger:
		set {_uuid} to uuid of arg-1
		#Fire Gem
		set {Fire.Power3.Campfire.Minute.%{_uuid}%} to -1
		set {Fire.Power2.Enchanting.Minute.%{_uuid}%} to -1
		set {Fire.Power1.Fireball.Minute.%{_uuid}%} to -1

		

		#Strength

		set {Strength.Power3.Chad.Minute.%{_uuid}%} to -1
		set {Strength.Power2.Enchanting.Minute.%{_uuid}%} to -1
		set {Strength.Power1.Frailer.Minute.%{_uuid}%} to -1



		#Puff

		set {Puff.Power3.Breezy.Minute.%{_uuid}%} to -1
		set {Puff.Power2.Enchanting.Minute.%{_uuid}%} to -1
		set {Puff.Power1.Dash.Minute.%{_uuid}%} to -1
		set {Puff.Power4.Doublejump.Second.%{_uuid}%} to 0


		#Speed

		set {Speed.Power3.SpeedStorm.Minute.%{_uuid}%} to -1
		set {Speed.Power2.Enchanting.Minute.%{_uuid}%} to -1
		set {Speed.Power1.SlothSedative.Minute.%{_uuid}%} to -1


		#Astra
		set {Astra.Power3.Projection.Minute.%{_uuid}%} to -1
		set {Astra.Power1.Daggers.Minute.%{_uuid}%} to -1

		#Life
		set {Life.Power1.CircleOfLfe.Minute.%{_uuid}%} to -1
		set {Life.Power2.Healer.Minute.%{_uuid}%} to -1
		set {Life.Power3.HeartDrainer.Minute.%{_uuid}%} to -1
		
		# Wealth
		set {Wealth.Power1.Unfortunate.Minute.%{_uuid}%} to -1
		set {Wealth.Power2.Enchanting.Minute.%{_uuid}%} to -1
		set {Wealth.Power3.RichRush.Minute.%{_uuid}%} to -1

		# Life
		set {Life.Power1.HeartDrainer.Minute.%{_uuid}%} to -1
		set {Life.Power2.Healer.Minute.%{_uuid}%} to -1
		set {Life.Power3.CircleOfLfe.Minute.%{_uuid}%} to -1

		# Gold
		set {Gold.Power1.Snap.Minute.%{_uuid}%} to -1
		set {Gold.Power2.Railer.Minute.%{_uuid}%} to -1








		
		




		








				
#on join:
#	set {_uuid} to uuid of player
#	if {Bliss.GemHealth.%{_uuid}%} is not set:
#		set {Bliss.GemHealth.%{_uuid}%} to 6
#		execute console command "rollgem %player%"

on join:
	set {_uuid} to uuid of player
	if {Gem.%{_uuid}%} is not set:
		set {Bliss.GemHealth.%{_uuid}%} to 6
		set {Bliss.Tier.%{_uuid}%} to 1
		execute console command "firstgem %player%"

	if {Disabled.%{_uuid}%} is not set:
		set {Disabled.%{_uuid}%} to 0

	if {ShotFireball.%{_uuid}%} is not set:
		set {ShotFireball.%{_uuid}%} to false
	if {Bliss.Particles.Selected.%{_uuid}%} is not set:
		add player to {Bliss.Particles.Normal::*}
		set {Bliss.Particles.Selected.%{_uuid}%} to 1


#Anti drop




on death of player:
	loop the drops:
		if lore of loop-value contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
			remove loop-value from the drops




on join:
	if {revived.%uuid of player%} is true:
		if player does not have a prismarine shard named "<##A01FFF>&lᴀsᴛʀᴀ &r<##C7C7C7>ɢᴇᴍ":
			if player does not have a amethyst shard named "<##A01FFF>&lᴀsᴛʀᴀ &r<##C7C7C7>ɢᴇᴍ":
				if player does not have a prismarine shard named "<##FE8120>&lғɪʀᴇ &r<##FFD773>ɢᴇᴍ":
					if player does not have a amethyst shard named "<##FE8120>&lғɪʀᴇ &r<##C7C7C7>ɢᴇᴍ":
						if player does not have a prismarine shard named "<##FE04B4>&lʟɪғᴇ &r<##FFD773>ɢᴇᴍ":
							if player does not have a amethyst shard named "<##FE04B4>&lʟɪғᴇ &r<##C7C7C7>ɢᴇᴍ":
								if player does not have a prismarine shard named "<##EFEFEF>&lᴘᴜғғ &r<##FFD773>ɢᴇᴍ":
									if player does not have a amethyst shard named "<##EFEFEF>&lᴘᴜғғ &r<##C7C7C7>ɢᴇᴍ":
										if player does not have a prismarine shard named "<##FEFD17>&lsᴘᴇᴇᴅ &r<##FFD773>ɢᴇᴍ":
											if player does not have a amethyst shard named "<##FEFD17>&lsᴘᴇᴇᴅ &r<##C7C7C7>ɢᴇᴍ":
												if player does not have a prismarine shard named "<##F10303>sᴛʀᴇɴɢᴛʜ &r<##FFD773>ɢᴇᴍ":
													if player does not have a amethyst shard named "<##F10303>&lsᴛʀᴇɴɢᴛʜ &r<##C7C7C7>ɢᴇᴍ":
														if player does not have a prismarine shard named "<##0EC912>&lᴡᴇᴀʟᴛʜ &r<##FFD773>ɢᴇᴍ":
															if player does not have a amethyst shard named "<##0EC912>&lᴡᴇᴀʟᴛʜ &r<##C7C7C7>ɢᴇᴍ":
																execute console command "givegems %player%"

		execute console command "setcorrectgems %player%"
		set {revived.%uuid of player%} to false



command /trust [<text>] [<offlineplayer>]:
	trigger:
		set {_uuid} to uuid of player
		set {_arguuid} to uuid of arg-2
		if arg-1 is "list":
			set {_s} to 0
			set {_Bliss.Trusted.GUI} to a new chest inventory with 3 row with name "<##FFE4AB>ᴛʀᴜsᴛᴇᴅ ᴘʟᴀʏᴇʀs"
			loop {Bliss.Trusted.%{_uuid}%::*}:

				set {_p} to loop-value parsed as offline player
				set slot {_s} of {_Bliss.Trusted.GUI} to {_p}'s skull named "&e%{_p}%" with lore "&cClick to remove"
				add 1 to {_s}

			open {_Bliss.Trusted.GUI} to player

		if arg-1 is "add":
			if arg-2 is set:
				if {Bliss.Trusted.%{_uuid}%::*} contains {_arguuid}:
					send "<##FFE4AB>🔮 <##A4FEF1>%arg-2% &cis already trusted!" to player




				else:
					
					set {_uuid} to uuid of player
					add {_arguuid} to {Bliss.Trusted.%{_uuid}%::*}

					send "<##FFE4AB>🔮 &aTrusted <##A4FEF1>%arg-2%" to player
					

		if arg-1 is "remove":
			if arg-2 is set:
				if {Bliss.Trusted.%{_uuid}%::*} contains {_arguuid}:
					send "<##FFE4AB>🔮 &cUntrusted <##A4FEF1>%arg-2%" to player
					remove {_arguuid} from {Bliss.Trusted.%{_uuid}%::*}

on inventory click:
	if name of event-inventory is "<##FFE4AB>ᴛʀᴜsᴛᴇᴅ ᴘʟᴀʏᴇʀs":
		cancel event
		if event-item is a player head:
			close player's inventory

			set {_T} to "%event-item's name%"
			replace all "&e" with "" in {_T}
			replace all "§e" with "" in {_T}
			set {_Tplayer} to "%{_T}%" parsed as offline player
			broadcast {_Tplayer}

			set {_uuid} to uuid of player
			send "<##FFE4AB>🔮 &cUntrusted <##A4FEF1>%{_T}%" to player
			remove {_Tplayer}'s uuid from {Bliss.Trusted.%{_uuid}%::*}
		

on inventory click:
	if name of event-inventory is "<##FFE4AB>ᴛʀᴜsᴛᴇᴅ ᴘʟᴀʏᴇʀs":
		cancel event


#on inventory click:
#    set {_clickedslot} to clicked slot

#    if lore of {_clickedslot} contains "<##FFE4AB>ᴘᴀssɪᴠᴇs":
#        if {_clickedslot} is not player's inventory:
#            cancel event






on tab complete for "/trust":
    set tab completions for position 1 to "add" and "remove" and "list"
					










